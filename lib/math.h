/*==============================================================================

	Title		: MATH
	Description :
	Date		:
	Author		:

--------------------------------------------------------------------------------

==============================================================================*/



#pragma once
#ifndef _MATH_H_
#define _MATH_H_


/*------------------------------------------------------------------------------
* include宣言
------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
* define宣言
------------------------------------------------------------------------------*/
namespace MATH {
	constexpr float PI = 3.141592f;							// pi
	constexpr float Rad2Deg = 57.2958f;						// 弧度法から度数法に変換
	constexpr float Deg2Rad = 0.0174533f;					// 度数法から弧度法に変換
	constexpr float NAPIER = 2.71828182846f;				// ネイピア数
}

/*------------------------------------------------------------------------------
* extern宣言
------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
* prototype宣言
------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
* class宣言
------------------------------------------------------------------------------*/
namespace MATH {
	/*------------------------------------------------------------------------------
	*	乗算
	------------------------------------------------------------------------------*/
	// 2乗
	template<class T>
	T Pow(T value) { return value * value; }
	// 3乗
	template<class T>
	T Cubic(T value) { return value * value * value; }
	// 4乗
	template<class T>
	T Quartic(T value) { return value * value * value * value; }



	/*------------------------------------------------------------------------------
	*	関数
	------------------------------------------------------------------------------*/
	// 切り捨て
	float Floor(float value);
	// 切り上げ
	float Ceiling(float value);
	// 四捨五入
	float Round(float value);
	// 絶対値
	template<class T>
	T Abs(T value) { return 0 <= value ? value : -value; }
	// 最大値
	template<class T>
	T Max(T a, T b) { return a < b ? b : a; }
	// 最小値
	template<class T>
	T Min(T a, T b) { return a < b ? a : b; }
	// 範囲値
	template<class T>
	T Range(T a, T b, T t) { return a < t && t < b ? t : t <= a ? a : b; }



	/*------------------------------------------------------------------------------
	*	補完関数
	------------------------------------------------------------------------------*/
	// 線形
	template<class T>
	T Leap(T a, T b, float t) { return a * (1 - t) + b * t; }
	// 4次ベジェ曲線
	template<class T>
	T Bezier(T a, T b, T c, T d, float t) { return a * Cubic(1 - t) + b * 3 * Pow(1 - t) * t + c * 3 * (1 - t) * Pow(t) + d * Cubic(t); }
	// 4次ベジェ曲線の微分
	template<class T>
	T DiffBeizer(T a, T b, T c, T d, float t) { return (b - a) * 3 * Pow(1 - t) + (c - b) * 6 * (1 - t) * t + (d - c) * 3 * Pow(t); }



	/*------------------------------------------------------------------------------
	*	ランダム
	------------------------------------------------------------------------------*/
	// ランダム
	float Rand();
	// ランダム
	float Rand(float min, float max);
	// ランダム
	int Rand(int min, int max);



	/*------------------------------------------------------------------------------
	*	数学関数
	------------------------------------------------------------------------------*/
	// 反復
	float Repetition(float value);
	// 往復
	float RoundTrip(float value);
	// スパン (span倍 <= t < span + 1倍より小さい spanの倍数の値を調べる)
	float Span(int t, float span);
	// スパン (span倍 <= t < span + 1倍より小さい spanの倍数の値を調べる)
	int Span(int t, int span);

}

#endif
